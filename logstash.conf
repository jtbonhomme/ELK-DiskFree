
input {
        udp {
                port => 10514
                type => "syslog"
        }
        udp {
                port => 10515
                type => "php"
        }
        udp {
                port => 10516
                type => "mysql-slow"
        }
        udp {
                port => 10517
                type => "mongo"
        }

}
filter {
#--------------------------------SYSLOG------------------------#
        if [type] == "syslog"{
                grok {
                    match => { "message" => "(?m)<%{POSINT:syslog_pri}>%{DATA:syslog_month} %{DATA:syslog_daymonth} %{DATA:syslog_hour} %{DATA:FQDN} %{DATA:Programme}\[%{NUMBER:syslog_pid}\]\: %{GREEDYDATA:Message}" }
                    add_field => [ "received_at", "%{@timestamp}" ]
                }
                if [syslog_pid] {
                        syslog_pri{}


                        if "CRON" in [Programme] {

                                mutate {

                                        replace => [ "Programme", "CRON"]
                                }

                        }
                        if "irqbalance" in [Programme] {

                                mutate {
                                        replace => [ "Programme", "irqbalance"]
                                }
                        }
                }
                else {
                        grok {

                                match => { "message" => "(?m)<%{POSINT:syslog_pri}>%{DATA:syslog_month} %{DATA:syslog_daymonth} %{DATA:syslog_hour} %{DATA:FQDN} %{DATA:Programme}\: %{GREEDYDATA:Message}" }
                                overwrite => [ "message" ]
                        }


                }
                if "CRON" in [Programme] {

                        mutate {

                                replace => [ "Programme", "CRON"]
                        }

                }
                if "irqbalance" in [Programme] {

                        mutate {
                                replace => [ "Programme", "irqbalance"]
                        }
                }
        }

#---------------------------------PHP---------------------------------#

        if [type] == "php" {
                grok {
                         match => { "message" => "<%{POSINT:syslog_pri}>%{DATA:syslog_month} %{DATA:syslog_daymonth} %{DATA:syslog_hour} %{DATA:FQDN} %{DATA:Programme}\ %{GREEDYDATA:Message}" }
                        overwrite => [ "message"]

                }
                mutate {
                        update => [ "Programme", "php-fpm" ]
                }
        }
#-----------------MYSQL-SLOW-----------------------------------#
        if [type] == "mysql-slow" {
                grok {
                         match => { "message" => "<%{POSINT:syslog_pri}>%{DATA:syslog_month} %{DATA:syslog_daymonth} %{DATA:syslog_hour} %{DATA:FQDN} %{DATA:Programme}\ %{GREEDYDATA:Message}" }
                        overwrite => [ "message"]

                }

#               grep {
#                       match => { message => ["# Time:"]}
#                       negate => true
#
#                       }
#               multiline {
#
#                       pattern => "^#|^SET"
#                       negate => true
#                       what => "previous"
#
#                       }
#               grok {
#                                        match => {
#                                        message => [
#                                                    "# User@Host: %{WORD:user}\[%{WORD}\] @ (%{HOST:client_hostname}|) \[(%{IP:client_ip}|)\]",
#                                                    "# Thread_id: %{NUMBER:thread_id:int} \s*Schema: (%{WORD:schema}| ) \s*Last_errno: %{NUMBER:last_errno:int} \s*Killed: %{NUMBER:killed:int}",
#                                                    "# Query_time: %{NUMBER:query_time:float} \s*Lock_time: %{NUMBER:lock_time:float} \s*Rows_sent: %{NUMBER:rows_sent:int} \s*Rows_examined: %{NUMBER:rows_examined:int} \s*Rows_affected: %{NUMBER:rows_affected:int} \s*Rows_read: %{NUMBER:rows_read:int}",
#                                                    "# Bytes_sent: %{NUMBER:bytes_sent:int}",
#                                                    "(?m)SET timestamp=%{NUMBER:timestamp};%{GREEDYDATA:mysql_query}"]}
#
#               }
#               mutate {
#                       gsub => [ "mysql_query", "\n", " "]
#                       gsub => [ "mysql_query", " ", " "]
#                       add_tag => "mutated_mysql_query"
#
#                       }
#               multiline {
#
#                       pattern => "(# User|# Thread|# Query|# Time|# Bytes)"
#                       negate => false
#                       what => "next"
#                       }
#               date {
#                       match => [ "timestamp", "UNIX"]
#                       }
#               mutate {
#                       remove_field => [ "timestamp"]
#                       }
                }
#-------------------------------MONGO-DEBUG------------------------------#
                if [type] == "mongo" {

                grok {
            match => { "message" => "<%{POSINT:syslog_pri}>%{DATA:syslog_month} %{DATA:syslog_daymonth} %{DATA:syslog_hour} %{DATA:FQDN} %{DATA:Programme}\: %{GREEDYDATA:Message}" }
                        overwrite => [ "message"]

                }
                        if "mongos" in [Programme] {

                                mutate {

                                        update => [ "Programme", "mongos"]

                                }
                        }

                        if "mongod" in [Programme] {

                                mutate {
                                        update => [ "Programme", "mongod"]

                                        }
                        }



                }
#-------------------------------TOMCAT-----------------------------------#
                if [Programme] == "tomcat7" {
                        mutate {
                                replace => [ "message", "%{Message}"]
                        }
                        multiline {
                                pattern => "^*\tat*"
                                what => "previous"
                        }
                        if "multiline" in [tags] {
                                mutate {
                                        replace => [ "Message", "%{message}"]
                                        }
                        }

                }

}
output {
  elasticsearch { host => localhost }
}
