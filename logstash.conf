input {
	udp {
		port => 10514
		type => "syslog"
	}
	udp {
		port => 10515
		type => "nginx"
	}
	tcp {
		port => 10515
		type => "nginx"
	}
	udp {	
		port => 10516
		type => "nginx_504"
	}
	tcp {	
		port => 10516
		type => "nginx_504"
	}
}

filter {
#--------------------------------SYSLOG------------------------#
        if [type] == "syslog"{
 grok {
      match => { "message" => "(?m)%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:FQDN} %{DATA:Programme}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:Message}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
    syslog_pri { }
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
}

#-----------------MYSQL-SLOW-----------------------------------#
#        if [type] == "mysql-slow" {
#                grok {
#                         match => { "message" => "<%{POSINT:syslog_pri}>%{DATA:syslog_month}  %{DATA:syslog_daymonth} %{DATA:syslog_hour} %{DATA:FQDN} %{DATA:Programme}\ %{GREEDYDATA:Message}" }
#                        overwrite => [ "message"]
#
#                }

#               grep {
#                       match => { message => ["# Time:"]}
#                       negate => true
#
#                       }
#               multiline {
#
#                       pattern => "^#|^SET"
#                       negate => true
#                       what => "previous"
#
#                       }
#               grok {
#                                        match => {
#                                        message => [
#                                                    "# User@Host: %{WORD:user}\[%{WORD}\] @ (%{HOST:client_hostname}|) \[(%{IP:client_ip}|)\]",
#                                                    "# Thread_id: %{NUMBER:thread_id:int} \s*Schema: (%{WORD:schema}| ) \s*Last_errno: %{NUMBER:last_errno:int} \s*Killed: %{NUMBER:killed:int}",
#                                                    "# Query_time: %{NUMBER:query_time:float} \s*Lock_time: %{NUMBER:lock_time:float} \s*Rows_sent: %{NUMBER:rows_sent:int} \s*Rows_examined: %{NUMBER:rows_examined:int} \s*Rows_affected: %{NUMBER:rows_affected:int} \s*Rows_read: %{NUMBER:rows_read:int}",
#                                                    "# Bytes_sent: %{NUMBER:bytes_sent:int}",
#                                                    "(?m)SET timestamp=%{NUMBER:timestamp};%{GREEDYDATA:mysql_query}"]}
#
#               }
#               mutate {
#                       gsub => [ "mysql_query", "\n", " "]
#                       gsub => [ "mysql_query", " ", " "]
#                       add_tag => "mutated_mysql_query"
#
#                       }
#               multiline {
#
#                       pattern => "(# User|# Thread|# Query|# Time|# Bytes)"
#                       negate => false
#                       what => "next"
#                       }
#               date {
#                       match => [ "timestamp", "UNIX"]
#                       }
#               mutate {
#                       remove_field => [ "timestamp"]
#                       }
#-------------------------------TOMCAT-----------------------------------#
                if "tomcat7" in [Programme] {
			mutate {
				replace => [ "message", "%{Message}"]
			}			
                        multiline {
                                pattern => "^\tat*"
                                what => "previous"
                        }
			multiline {
				pattern => "^java.lang.Null*"
				what => "previous"
			
			}
			
			if "multiline" in [tags] {
				mutate {
					replace => [ "Message", "%{message}"]
					}
			}
			if "%{Message}" in [message] {
				drop {}
			}

                }

                if "zookeeper" in [Programme] {
			mutate {
				replace => [ "message", "%{Message}"]
			}			
                        multiline {
                                pattern => "^\tat*"
                                what => "previous"
                        }
			multiline {
				pattern => "^java.lang.Null*"
				what => "previous"
			
			}
			
			if "multiline" in [tags] {
				mutate {
					replace => [ "Message", "%{message}"]
					}
			}
			if "%{Message}" in [message] {
				drop {}
			}

                }
#----------------------------------NGINX------------------------------#
 if "nginx" in [type] {
 grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:FQDN} %{DATA:Programme}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:Message}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
    syslog_pri { }
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
                }
                if "stickyadstv.com" in [FQDN] {
                        grok {
                                match => { "FQDN" => "%{DATA:FQDN}.stickyadstv.com"}
                                overwrite => [ "FQDN"]
                        }
                }
                if "- -" in [Message] {
                        mutate {
                                update => [ "Programme", "nginx_access" ]
                        }
                }
                if "#0:" in [Message] {
                        mutate {
                                update => ["Programme", "nginx_error" ]
                        }
                }
		if "nginx_504" in [type] {
		
			mutate {
				update => ["Programme", "nginx_504" ]
			}
		}

################################AJUSTEMENTS###############################
	if "localhost.localdomain" in [FQDN] {
		drop {}
	}
	if "tomcat7" in [Programme] {
		mutate {
			update => ["Programme", "tomcat7" ]
		}
	}
	if "sfx-php" in [Programme] {
		mutate {
			update => ["Programme", "sfx-php"]
		}
	}
	if "php-fpm" in [Programme] {
		mutate {
			update => ["Programme", "php-fpm"]
		}
	}
	if "CRON" in [Programme] {
		mutate {
			update => ["Programme", "CRON"]
		}
	}
	if "irqbalance" in [Programme] {
		mutate {
			update => ["Programme", "irqbalance"]
		}
	}
}
		

output {
	elasticsearch { 
		host => localhost 
	}
}
